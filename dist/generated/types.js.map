{"version":3,"sources":["../../src/generated/types.ts"],"sourcesContent":["import { GraphQLResolveInfo } from 'graphql';\r\nimport { Context } from '../config/context';\r\nexport type Maybe<T> = T | null;\r\nexport type InputMaybe<T> = Maybe<T>;\r\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\r\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\r\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\r\n/** All built-in and custom scalars, mapped to their actual values */\r\nexport type Scalars = {\r\n  ID: string;\r\n  String: string;\r\n  Boolean: boolean;\r\n  Int: number;\r\n  Float: number;\r\n};\r\n\r\nexport type Query = {\r\n  __typename?: 'Query';\r\n  hello?: Maybe<Scalars['String']>;\r\n};\r\n\r\n\r\n\r\nexport type ResolverTypeWrapper<T> = Promise<T> | T;\r\n\r\n\r\nexport type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {\r\n  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;\r\n};\r\nexport type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs>;\r\n\r\nexport type ResolverFn<TResult, TParent, TContext, TArgs> = (\r\n  parent: TParent,\r\n  args: TArgs,\r\n  context: TContext,\r\n  info: GraphQLResolveInfo\r\n) => Promise<TResult> | TResult;\r\n\r\nexport type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (\r\n  parent: TParent,\r\n  args: TArgs,\r\n  context: TContext,\r\n  info: GraphQLResolveInfo\r\n) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;\r\n\r\nexport type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (\r\n  parent: TParent,\r\n  args: TArgs,\r\n  context: TContext,\r\n  info: GraphQLResolveInfo\r\n) => TResult | Promise<TResult>;\r\n\r\nexport interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {\r\n  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;\r\n  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;\r\n}\r\n\r\nexport interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {\r\n  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;\r\n  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;\r\n}\r\n\r\nexport type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =\r\n  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>\r\n  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;\r\n\r\nexport type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =\r\n  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)\r\n  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;\r\n\r\nexport type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (\r\n  parent: TParent,\r\n  context: TContext,\r\n  info: GraphQLResolveInfo\r\n) => Maybe<TTypes> | Promise<Maybe<TTypes>>;\r\n\r\nexport type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;\r\n\r\nexport type NextResolverFn<T> = () => Promise<T>;\r\n\r\nexport type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (\r\n  next: NextResolverFn<TResult>,\r\n  parent: TParent,\r\n  args: TArgs,\r\n  context: TContext,\r\n  info: GraphQLResolveInfo\r\n) => TResult | Promise<TResult>;\r\n\r\n/** Mapping between all available schema types and the resolvers types */\r\nexport type ResolversTypes = {\r\n  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;\r\n  Query: ResolverTypeWrapper<{}>;\r\n  String: ResolverTypeWrapper<Scalars['String']>;\r\n};\r\n\r\n/** Mapping between all available schema types and the resolvers parents */\r\nexport type ResolversParentTypes = {\r\n  Boolean: Scalars['Boolean'];\r\n  Query: {};\r\n  String: Scalars['String'];\r\n};\r\n\r\nexport type QueryResolvers<ContextType = Context, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {\r\n  hello?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;\r\n};\r\n\r\nexport type Resolvers<ContextType = Context> = {\r\n  Query?: QueryResolvers<ContextType>;\r\n};\r\n\r\n"],"names":[],"mappings":"AAAA,mEA4GE"}